#include <iostream>
#include <sstream>
#include <string>
#include <queue>

using namespace std;

class TreeNode
{
public:
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x)
    {
        val = x;
        left = nullptr;
        right = nullptr;
    }
};

class Tree
{
public:
    string serialize(TreeNode* root)
    {
        ostringstream out;
        serializeHelper(root, out);
        return out.str();
    }
    TreeNode* deserialize(string data)
    {
        istringstream in(data);
        return deserializeHelper(in);
    }   
private:
    void serializeHelper(TreeNode* node, ostringstream& out)
    {
        if (node == nullptr)
        {
            out << "null ";
        }
        else
        {
            out << node->val << " ";
            serializeHelper(node->left, out);
            serializeHelper(node->right, out);
        }
    }
    TreeNode* deserializeHelper(istringstream& in)
    {
        string val;
        in >> val;
        
        if (val == "null")
        {
            return nullptr;
        }
        
        TreeNode* node = new TreeNode(stoi(val));
        node->left = deserializeHelper(in);
        node->right = deserializeHelper(in);
        
        return node;
    }
};

void printTree(TreeNode* root)
{
    if (root == nullptr)
    {
        cout << "null ";
    } 
    else
     {
        cout << root->val << " ";
        printTree(root->left);
        printTree(root->right);
    }
}

int main() 
{
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->right->left = new TreeNode(4);
    root->right->right = new TreeNode(5);
    
    Tree t;
    string serialized = t.serialize(root);
    cout << "Serialized tree: " << serialized << endl;
    
    TreeNode* deserialized = t.deserialize(serialized);
    cout << "Deserialized tree: ";
    printTree(deserialized);
    cout << endl;
    
    return 0;
}
