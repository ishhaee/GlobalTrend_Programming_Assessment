#include <iostream>
#include <unordered_map>
#include <algorithm>
#include <limits>
using namespace std;

struct TreeNode 
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) 
    {
        val = x;
        left = nullptr;
        right = nullptr;
    }
};

class Solution 
{
public:
    int maxPathSum(TreeNode* root) 
    {
        unordered_map<TreeNode*, int> memo;
        int maxSum = numeric_limits<int>::min();
        maxPathSumRecursive(root, maxSum, memo);
        return maxSum;
    }
    
private:
    int maxPathSumRecursive(TreeNode* node, int& maxSum, unordered_map<TreeNode*, int>& memo)
     {
        if (node == nullptr) 
            return 0;
        if (memo.find(node) != memo.end())
            return memo[node];        
        int leftSum = max(0, maxPathSumRecursive(node->left, maxSum, memo));
        int rightSum = max(0, maxPathSumRecursive(node->right, maxSum, memo));        
        maxSum = max(maxSum, node->val + leftSum + rightSum);      
        int result = node->val + max(leftSum, rightSum);
        memo[node] = result;        
        return result;
    }
};

TreeNode* buildTreeFromArray(int arr[], int idx, int n) {
    if (idx >= n || arr[idx] == -1) 
        return nullptr;    
    TreeNode* root = new TreeNode(arr[idx]);
    root->left = buildTreeFromArray(arr, 2 * idx + 1, n);
    root->right = buildTreeFromArray(arr, 2 * idx + 2, n);    
    return root;
}

int main() 
{
    int arr[] = {1, 2, 3};
    int n = sizeof(arr) / sizeof(arr[0]);   
    TreeNode* root = buildTreeFromArray(arr, 0, n);   
    Solution sol;
    int maxPathSum = sol.maxPathSum(root);    
    cout << "Maximum Path Sum: " << maxPathSum << endl;    
    return 0;
}
